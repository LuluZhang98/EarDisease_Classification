# -*- coding: utf-8 -*-
"""AlexNet_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HYcfi9yRUhVwyCX0C4vY2o1_ZGPp7TJY
"""

#import libraries
import torch
import torchvision.transforms as transforms
from PIL import Image
import torch.nn.functional as F
from torchvision.models import AlexNet
import torch.nn as nn

import os
import shutil

# Provide the path to the saved model file
AlexNet_model_path = './AlexNet_model.pth'   #change path of the saved model

class ReducedAlexNet(nn.Module):
    def __init__(self, num_classes=2):
        super(ReducedAlexNet, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=5, stride=1, padding=2),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2),
            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2),
            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.Conv2d(128, 128, kernel_size=3, padding=1),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2),
        )
        self.avgpool = nn.AdaptiveAvgPool2d((6, 6))
        self.classifier = nn.Sequential(
            nn.Dropout(),
            nn.Linear(128 * 6 * 6, 1024),
            nn.ReLU(inplace=True),
            nn.Dropout(),
            nn.Linear(1024, num_classes),
        )

    def forward(self, x):
        x = self.features(x)
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.classifier(x)
        return x

# Instantiate the model
AlexNet_model = ReducedAlexNet(num_classes=2)

# Load the saved model state dictionary
AlexNet_model.load_state_dict(torch.load(AlexNet_model_path, map_location = 'cpu'))  # Replace with the actual path to the saved model

# Set the model to evaluation mode
AlexNet_model.eval()

"""###**Single Image Prediction**"""

import matplotlib.pyplot as plt

def alexnet_predict(img_path):
    # Load the image
    image = Image.open(img_path)

    # Add any preprocessing steps here, if required

    # Convert the PIL Image to a tensor
    transform = transforms.ToTensor()
    image_tensor = transform(image)

    # Add a batch dimension to the image tensor
    image_tensor = torch.unsqueeze(image_tensor, 0)

    # Forward pass through the model
    with torch.no_grad():
        output = AlexNet_model(image_tensor)

    # Apply softmax to the output tensor
    probabilities = F.softmax(output, dim=1)

    # Get the predicted class and its probability confidence
    predicted_prob, predicted_class = torch.max(probabilities, 1)

    # Convert the predicted class and its probability confidence to Python scalars
    predicted_prob = predicted_prob.item()
    predicted_class = predicted_class.item()

    # Define the class labels
    class_labels = ['NORMAL', 'Otitis Media']

    # Print the predicted class and its probability confidence with color
    predicted_text = '\033[94m{}\033[0m'.format(class_labels[predicted_class])
    confidence_text = '\033[94m{:.2f}%\033[0m'.format(predicted_prob * 100)
    print('The Image is predicted as',predicted_text, 'with', confidence_text,'confidence.' ' Not for diagnosis, always consult a doctor')

    # # Display the image
    # plt.imshow(image)
    # plt.axis('off')
    # #plt.title('Predicted class: {}\nProbability confidence: {:.2f}%'.format(class_labels[predicted_class], predicted_prob * 100))
    # plt.show()

    return class_labels[predicted_class], format(predicted_prob * 100, '.2f')


# # Image path
# Image_Path = './Normal-img/1.png'  # Replace with the actual path to the image

# print(alexnet_predict(Image_Path))
